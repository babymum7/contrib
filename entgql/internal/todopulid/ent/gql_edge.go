// Copyright 2019-present Facebook
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package ent

import "context"

func (q *Category) Todos(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *TodoOrder, where *TodoWhereInput,
) (*TodoConnection, error) {
	opts := []TodoPaginateOption{
		WithTodoOrder(orderBy),
		WithTodoFilter(where.Filter),
	}
	totalCount := q.Edges.totalCount[0]
	if nodes, err := q.Edges.TodosOrErr(); err == nil || totalCount != nil {
		pager, err := newTodoPager(opts)
		if err != nil {
			return nil, err
		}
		conn := &TodoConnection{}
		if totalCount != nil {
			conn.TotalCount = *totalCount
		}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return q.QueryTodos().Paginate(ctx, after, first, before, last, opts...)
}

func (q *Friendship) User(ctx context.Context) (*User, error) {
	result, err := q.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = q.QueryUser().Only(ctx)
	}
	return result, err
}

func (q *Friendship) Friend(ctx context.Context) (*User, error) {
	result, err := q.Edges.FriendOrErr()
	if IsNotLoaded(err) {
		result, err = q.QueryFriend().Only(ctx)
	}
	return result, err
}

func (q *Group) Users(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, where *UserWhereInput,
) (*UserConnection, error) {
	opts := []UserPaginateOption{
		WithUserFilter(where.Filter),
	}
	totalCount := q.Edges.totalCount[0]
	if nodes, err := q.Edges.UsersOrErr(); err == nil || totalCount != nil {
		pager, err := newUserPager(opts)
		if err != nil {
			return nil, err
		}
		conn := &UserConnection{}
		if totalCount != nil {
			conn.TotalCount = *totalCount
		}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return q.QueryUsers().Paginate(ctx, after, first, before, last, opts...)
}

func (q *Todo) Parent(ctx context.Context) (*Todo, error) {
	result, err := q.Edges.ParentOrErr()
	if IsNotLoaded(err) {
		result, err = q.QueryParent().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (q *Todo) Children(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *TodoOrder, where *TodoWhereInput,
) (*TodoConnection, error) {
	opts := []TodoPaginateOption{
		WithTodoOrder(orderBy),
		WithTodoFilter(where.Filter),
	}
	totalCount := q.Edges.totalCount[1]
	if nodes, err := q.Edges.ChildrenOrErr(); err == nil || totalCount != nil {
		pager, err := newTodoPager(opts)
		if err != nil {
			return nil, err
		}
		conn := &TodoConnection{}
		if totalCount != nil {
			conn.TotalCount = *totalCount
		}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return q.QueryChildren().Paginate(ctx, after, first, before, last, opts...)
}

func (q *Todo) Category(ctx context.Context) (*Category, error) {
	result, err := q.Edges.CategoryOrErr()
	if IsNotLoaded(err) {
		result, err = q.QueryCategory().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (q *User) Groups(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupFilter(where.Filter),
	}
	totalCount := q.Edges.totalCount[0]
	if nodes, err := q.Edges.GroupsOrErr(); err == nil || totalCount != nil {
		pager, err := newGroupPager(opts)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{}
		if totalCount != nil {
			conn.TotalCount = *totalCount
		}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return q.QueryGroups().Paginate(ctx, after, first, before, last, opts...)
}

func (q *User) Friends(ctx context.Context) ([]*User, error) {
	result, err := q.Edges.FriendsOrErr()
	if IsNotLoaded(err) {
		result, err = q.QueryFriends().All(ctx)
	}
	return result, err
}

func (q *User) Friendships(ctx context.Context) ([]*Friendship, error) {
	result, err := q.Edges.FriendshipsOrErr()
	if IsNotLoaded(err) {
		result, err = q.QueryFriendships().All(ctx)
	}
	return result, err
}
